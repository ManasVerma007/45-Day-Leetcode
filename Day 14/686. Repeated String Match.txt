Link - https://leetcode.com/problems/repeated-string-match/

Problem - 

Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".

Example 1:

Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.

Approach -  

Initialize original_a and count.
Repeatedly concatenate a with original_a until its length is >= b.
Check if b is a substring of a.
If not, repeat a once more and check again.
Return the minimum number of repetitions or -1 if not possible.