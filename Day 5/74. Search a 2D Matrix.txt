Link - https://leetcode.com/problems/search-a-2d-matrix/

Problem - You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true


Approach - 
First, it checks if the target is equal to the top-left element of the matrix (A[0][0]). If they are equal, it returns True as the target is found.

It calculates the number of rows (rows) and columns (cols) in the matrix.

If there's only one row (rows == 1), it performs a binary search within that row to find the target. It initializes pointers 'left' and 'right' to search within the row and iterates until they meet. If the target is found, it returns True, otherwise, it returns False.

If there are multiple rows, it uses a two-step binary search approach:

First, it performs a binary search on the first element of each row (A[mid][cols - 1]) to identify the row where the target might be present. It adjusts the 'top' and 'bottom' pointers accordingly based on whether the target is greater or smaller than the mid-row's last element.
Then, it performs a binary search within the identified row (A[top]) to find the target. It initializes pointers 'left' and 'right' to search within the row and iterates until they meet. If the target is found, it returns True, otherwise, it returns False.
If the target is not found in any of the steps, it returns False.